CREATE OR REPLACE FUNCTION FN_SMART_SIMILARITY_SORT(
    str1 IN VARCHAR2,
    str2 IN VARCHAR2
) RETURN NUMBER
IS

-- 중복단어 제거
FUNCTION remove_dup_tokens(str IN VARCHAR2)
RETURN VARCHAR2
IS
    v_token VARCHAR2(100);
    v_result VARCHAR2(4000);
BEGIN
    -- 정규식으로 공백, 하이픈 기준 토큰 추출
    FOR rec IN (
        SELECT REGEXP_SUBSTR(str, '[^ -]+', 1, LEVEL) AS token
        FROM dual
        CONNECT BY REGEXP_SUBSTR(str, '[^ -]+', 1, LEVEL) IS NOT NULL
    )
    LOOP
        -- 이미 결과에 토큰이 없으면 추가
        IF INSTR(' ' || v_result || ' ', ' ' || rec.token || ' ') = 0 THEN
            IF v_result IS NULL THEN
                v_result := rec.token;
            ELSE
                v_result := v_result || ' ' || rec.token;
            END IF;
        END IF;
    END LOOP;
    RETURN v_result;
END;


    -- 정규화
    FUNCTION F_NORMALIZE(s VARCHAR2) RETURN VARCHAR2 IS
    BEGIN
        RETURN LOWER(REGEXP_REPLACE(s, '[^A-Za-z0-9]', ''));
    END;

    -- 문자열 정렬
    FUNCTION F_SORT_STR(s VARCHAR2) RETURN VARCHAR2 IS
        arr DBMS_SQL.VARCHAR2_TABLE;
        i INTEGER;
        sorted VARCHAR2(4000) := '';
    BEGIN
        FOR i IN 1..LENGTH(s) LOOP
            arr(i) := SUBSTR(s, i, 1);
        END LOOP;
        -- 오라클 PL/SQL에는 배열 정렬이 없으므로, SQL로 정렬
        FOR rec IN (
            SELECT COLUMN_VALUE AS ch
            FROM TABLE(arr)
            ORDER BY COLUMN_VALUE
        ) LOOP
            sorted := sorted || rec.ch;
        END LOOP;
        RETURN sorted;
    END;


ndup1 VARCHAR2(4000);
    ndup2 VARCHAR2(4000);
    norm1 VARCHAR2(4000);
    norm2 VARCHAR2(4000);
    sort1 VARCHAR2(4000);
    sort2 VARCHAR2(4000);
    dist_orig NUMBER;
    dist_sort NUMBER;
    len_max_orig NUMBER;
    len_max_sort NUMBER;
    sim_orig NUMBER;
    sim_sort NUMBER;
    final_sim NUMBER;
BEGIN

ndup1 := remove_dup_tokens(str1);
    ndup2 := remove_dup_tokens(str2);

    norm1 := F_NORMALIZE(ndup1);
    norm2 := F_NORMALIZE(ndup2);

    sort1 := F_SORT_STR(norm1);
    sort2 := F_SORT_STR(norm2);

    -- 원본 Levenshtein
    len_max_orig := GREATEST(LENGTH(norm1), LENGTH(norm2));
    IF len_max_orig = 0 THEN
        sim_orig := 1;
    ELSE
        dist_orig := UTL_MATCH.EDIT_DISTANCE(norm1, norm2);
        sim_orig := 1 - dist_orig / len_max_orig;
        IF sim_orig < 0 THEN sim_orig := 0; END IF;
    END IF;

    -- 정렬 Levenshtein (문자 집합/순서 무시)
    len_max_sort := GREATEST(LENGTH(sort1), LENGTH(sort2));
    IF len_max_sort = 0 THEN
        sim_sort := 1;
    ELSE
        dist_sort := UTL_MATCH.EDIT_DISTANCE(sort1, sort2);
        sim_sort := 1 - dist_sort / len_max_sort;
        IF sim_sort < 0 THEN sim_sort := 0; END IF;
    END IF;

    -- 가중치 조합 (정렬 0.7 + 원본 0.3)
    final_sim := sim_sort * 0.7 + sim_orig * 0.3;

    RETURN ROUND(final_sim * 100, 2);
END;
/




