import os

# 치환 목록
replace_map = {
    "contenti": "standard",
    "tbwcore": "mdmadm"
}

# 검색할 디렉터리 목록
search_dirs = [
    r"C:\temp",
    r"C:\workspace",
    r"D:\projects"
]

# 대상 확장자
target_ext = [".java", ".jsp"]

def process_file(file_path):
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.read()

        original_content = content
        for old, new in replace_map.items():
            content = content.replace(old, new)

        if content != original_content:  # 변경이 발생했을 때만 저장
            with open(file_path, "w", encoding="utf-8") as f:
                f.write(content)
            print(f"Updated: {file_path}")
        else:
            print(f"No changes: {file_path}")

    except Exception as e:
        print(f"Error processing {file_path}: {e}")

def main():
    for root_dir in search_dirs:
        for dirpath, _, filenames in os.walk(root_dir):
            for filename in filenames:
                if any(filename.lower().endswith(ext) for ext in target_ext):
                    file_path = os.path.join(dirpath, filename)
                    process_file(file_path)

if __name__ == "__main__":
    main()