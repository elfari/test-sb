좋아. 네가 하고자 하는 걸 하나씩 깔끔하게 풀어서 정리해줄게.
목표는 VSCode에 Spring Boot 프로젝트를 "수작업으로" 세팅해서 Hello World까지 띄우는 거 맞지?
자, 심호흡하고 단계별로 가보자.


---

1단계: Spring Boot 관련 기본 jar 나열

Spring Boot 기본 구동을 위해 필요한 최소 jar는 다음이야.

spring-boot-2.x.x.RELEASE.jar (코어 부트스트랩)

spring-boot-autoconfigure-2.x.x.RELEASE.jar (자동설정 기능)

spring-boot-starter-web (Spring MVC, Tomcat 내장)

spring-web-5.x.x.RELEASE.jar

spring-webmvc-5.x.x.RELEASE.jar

spring-context-5.x.x.RELEASE.jar

spring-core-5.x.x.RELEASE.jar

spring-boot-starter-logging (로깅)

spring-boot-starter (기본 스타터)

jackson-core / jackson-databind (JSON 처리)


부수적으로 필요한 것들

slf4j-api.jar

logback-classic.jar

logback-core.jar

javax.annotation-api.jar


주의할 점: 버전끼리 맞춰야 돼. 예를 들어 Spring Boot 2.7.15를 쓴다면 전부 2.7.15 기반에 맞아야 해.


---

2단계: 관련 jar를 웹에서 다운로드

추천 사이트

Maven Central Repository

Spring Releases


다운로드 방법

1. Maven Central에 접속


2. 예를 들어 spring-boot-2.7.15 검색


3. jar 파일 클릭 → Assets → .jar 파일 다운로드



팁:
spring-boot-starter-web 같은 스타터는 의존성 목록만 담고 있고, 실제 jar는 다른 라이브러리들이야.
그래서 가능하면 "spring-boot-dependencies" BOM을 참고하거나, gradle 의존성 정보를 보고 개별 다운로드 하는 게 정확해.


---

3단계: 다운로드한 jar를 gradle 프로젝트의 lib 폴더에 넣기

1. VSCode에서 새 폴더 만들기: libs


2. 아까 다운받은 .jar 파일을 전부 libs 폴더 안에 넣기



폴더 구조 예시

my-springboot-project/
 ├─ build.gradle
 ├─ settings.gradle
 ├─ libs/
 │    ├─ spring-boot-2.7.15.jar
 │    ├─ spring-boot-autoconfigure-2.7.15.jar
 │    ├─ spring-web-5.3.26.jar
 │    └─ ...
 ├─ src/
     └─ main/
         └─ java/
             └─ com/
                 └─ example/
                     └─ demo/
                         └─ DemoApplication.java


---

4단계: Gradle로 빌드 준비

build.gradle 파일 예시

plugins {
    id 'java'
}

repositories {
    flatDir {
        dirs 'libs'  // libs 폴더에서 직접 jar 찾게 설정
    }
}

dependencies {
    implementation name: 'spring-boot-2.7.15'
    implementation name: 'spring-boot-autoconfigure-2.7.15'
    implementation name: 'spring-web-5.3.26'
    implementation name: 'spring-webmvc-5.3.26'
    implementation name: 'spring-context-5.3.26'
    implementation name: 'spring-core-5.3.26'
    implementation name: 'spring-boot-starter'
    implementation name: 'spring-boot-starter-logging'
    implementation name: 'jackson-core-2.13.4'
    implementation name: 'jackson-databind-2.13.4'
    implementation name: 'slf4j-api-1.7.36'
    implementation name: 'logback-classic-1.2.11'
    implementation name: 'logback-core-1.2.11'
    implementation name: 'javax.annotation-api-1.3.2'
}

그리고 settings.gradle은 아주 심플하게

rootProject.name = 'my-springboot-project'

빌드 명령어

./gradlew build

또는 Windows면

gradlew.bat build

처음에는 gradlew 파일이 없을 거야.
gradle init 명령으로 기본 파일을 세팅하거나, 그냥 gradle build를 사용해도 돼.


---

5단계: Hello World 작성

src/main/java/com/example/demo/DemoApplication.java

package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@SpringBootApplication
public class DemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }

    @RestController
    class HelloController {
        @GetMapping("/")
        public String hello() {
            return "Hello World!";
        }
    }
}


---

추가: 실행 방법

빌드가 끝났다면, 실행은 이렇게 하면 돼.

./gradlew bootRun

또는 직접 메인 클래스 실행

java -cp build/libs/* com.example.demo.DemoApplication


---

요약 흐름

1. 필요한 Spring Boot jar 파일 리스트 작성


2. Maven Central에서 직접 다운로드


3. 프로젝트에 libs/ 폴더 만들고 넣기


4. build.gradle로 수동 의존성 연결


5. gradle build → bootRun 또는 직접 java -cp 실행


6. Hello World 코드 작성 후 브라우저에서 http://localhost:8080 확인




---

혹시 여기서

bootRun이 에러난다거나

jar 경로를 못찾는다거나

Hello World가 안뜨면


그 부분 디테일 잡아주는 추가 가이드도 해줄게.

혹시 Spring Boot 버전이나 Java 버전을 몇으로 설정할지 정할까?
(ex: Spring Boot 2.7.15 + Java 11)
확정하면 버전에 맞춰 더 정확하게 안내할게.
정할까?










좋아, Spring Boot 3.3.3 버전에 맞춘 세팅으로 다시 깔끔하게 재정리할게.
(주의: Spring Boot 3.x는 Java 17 이상 필수야!)


---

1단계: Spring Boot 3.3.3 관련 jar 리스트

필수 jar

spring-boot-3.3.3.jar

spring-boot-autoconfigure-3.3.3.jar

spring-boot-starter-web

spring-web-6.1.x.jar

spring-webmvc-6.1.x.jar

spring-context-6.1.x.jar

spring-core-6.1.x.jar

spring-boot-starter

spring-boot-starter-logging

jackson-core-2.17.x.jar

jackson-databind-2.17.x.jar

slf4j-api-2.0.x.jar

logback-classic-1.4.x.jar

logback-core-1.4.x.jar

jakarta.annotation-api-2.1.1.jar (javax → jakarta 변경 주의!)


주의할 점

javax.* → jakarta.* 패키지로 변경됨 (JPA, Servlet 모두)

Tomcat 내장서버도 jakarta.servlet 기반으로 작동

Jackson도 2.17.x 버전대를 써야 함



---

2단계: 관련 jar 웹 다운로드

다운로드 경로 추천

Maven Central Repository

Spring 공식 리포지터리


예시 검색 키워드

spring-boot 3.3.3

spring-boot-autoconfigure 3.3.3

spring-web 6.1.6

jackson-databind 2.17.1

slf4j-api 2.0.13

logback-classic 1.4.14

jakarta.annotation-api 2.1.1


다운로드할 때 .jar 파일 클릭하고 Assets에서 직접 받으면 돼.


---

3단계: libs 폴더 구성

프로젝트에 libs/ 폴더를 만들고 다운로드한 jar를 넣는다.
필수 jar만 깔끔하게 모아야 한다.

구조 예시:

my-springboot-project/
 ├─ build.gradle
 ├─ settings.gradle
 ├─ libs/
 │    ├─ spring-boot-3.3.3.jar
 │    ├─ spring-boot-autoconfigure-3.3.3.jar
 │    ├─ spring-web-6.1.6.jar
 │    ├─ spring-webmvc-6.1.6.jar
 │    ├─ spring-context-6.1.6.jar
 │    ├─ spring-core-6.1.6.jar
 │    ├─ jackson-core-2.17.1.jar
 │    ├─ jackson-databind-2.17.1.jar
 │    ├─ slf4j-api-2.0.13.jar
 │    ├─ logback-classic-1.4.14.jar
 │    ├─ logback-core-1.4.14.jar
 │    └─ jakarta.annotation-api-2.1.1.jar
 ├─ src/
     └─ main/
         └─ java/
             └─ com/
                 └─ example/
                     └─ demo/
                         └─ DemoApplication.java


---

4단계: build.gradle 설정

plugins {
    id 'java'
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation name: 'spring-boot-3.3.3'
    implementation name: 'spring-boot-autoconfigure-3.3.3'
    implementation name: 'spring-web-6.1.6'
    implementation name: 'spring-webmvc-6.1.6'
    implementation name: 'spring-context-6.1.6'
    implementation name: 'spring-core-6.1.6'
    implementation name: 'jackson-core-2.17.1'
    implementation name: 'jackson-databind-2.17.1'
    implementation name: 'slf4j-api-2.0.13'
    implementation name: 'logback-classic-1.4.14'
    implementation name: 'logback-core-1.4.14'
    implementation name: 'jakarta.annotation-api-2.1.1'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

settings.gradle은 간단히:

rootProject.name = 'my-springboot-project'


---

5단계: Hello World 코드 작성

src/main/java/com/example/demo/DemoApplication.java

package com.example.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@SpringBootApplication
public class DemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(DemoApplication.class, args);
    }

    @RestController
    class HelloController {
        @GetMapping("/")
        public String hello() {
            return "Hello World from Spring Boot 3.3.3!";
        }
    }
}


---

6단계: 실행하기

빌드

./gradlew build

또는

gradle build

실행

java -cp build/libs/* com.example.demo.DemoApplication

또는 직접 gradle에 application 플러그인 붙여서 bootRun 설정해도 돼.


---

요약 정리


---

추가 조언

Gradle이 없으면 → gradle init 해서 기본 빌드 스크립트 만들어.

IDE 플러그인 없이 완전 수동 세팅이니까 jar 버전 일관성 무조건 유지해야 해.

권장 방법: 나중에는 이런 수작업 대신 gradle dependencies 선언해서 자동 다운로드 추천. (초기 경험용이라면 수작업도 좋아)



---

질문
혹시 build.gradle을 좀 더 자동화해서,
"libs 폴더에 있는 모든 jar 자동 import"
형태로 하고 싶어?
(이것도 바로 적용해줄 수 있어)
원해?

